/*
 * This build file was auto generated by running the Gradle 'init' task
 * by 'srramas' at '12/23/16 11:58 AM' with Gradle 3.0
 *
 * This generated file contains a sample Java project to get you started.
 * For more details take a look at the Java Quickstart chapter in the Gradle
 * user guide available at https://docs.gradle.org/3.0/userguide/tutorial_java_projects.html
 */

// Apply the java plugin to add support for Java
apply plugin: 'java'

// In this section you declare where to find the dependencies of your project
repositories {
    // Use 'jcenter' for resolving your dependencies.
    // You can declare any Maven/Ivy/file repository here.
    jcenter()
    mavenCentral()

}

configurations { compile }

buildscript {
    repositories { jcenter() }

    dependencies {
        classpath 'com.netflix.nebula:nebula-dependency-recommender:3.6.3'
    }
}

apply plugin: 'nebula.dependency-recommender'


dependencyRecommendations {
    mavenBom module: 'com.amazonaws:aws-java-sdk-bom:1.11.69'
}

task listJars {
    doLast {
        configurations.compile.each { File file -> println file.name }
    }
}

// In this section you declare the dependencies for your production and test code
dependencies {
    // The production code uses the SLF4J logging API at compile time
    compile 'org.slf4j:slf4j-api:1.7.21'
    compile 'com.beust:jcommander:1.48'
    compile 'log4j:log4j:1.2.17'
    compile 'org.apache.commons:commons-lang3:3.3.2'
    compile group: 'com.amazonaws', name: 'aws-java-sdk-dynamodb', version: '1.11.69'
    compile group: 'com.google.code.gson', name: 'gson', version: '2.3.1'


    // Declare the dependency for your favourite test framework you want to use in your tests.
    // TestNG is also supported by the Gradle Test task. Just change the
    // testCompile dependency to testCompile 'org.testng:testng:6.8.1' and add
    // 'test.useTestNG()' to your build script.
    testCompile 'junit:junit:4.12'
}


jar {
    manifest {
        attributes(
                'Main-Class': 'com.amazonaws.service.dynamodbv2.backup.SchemaOperation',
        )
    }
}

task fatJar(type: Jar) {
    manifest.from jar.manifest
    classifier = 'all'
    from {
        configurations.runtime.collect { it.isDirectory() ? it : zipTree(it) }
    } {
        exclude "META-INF/*.SF"
        exclude "META-INF/*.DSA"
        exclude "META-INF/*.RSA"
    }
    with jar
}